{"version":3,"sources":["constants.js","utils/notes.js","utils/synth.js","components/PianoKey.js","utils/piano.js","components/Piano.js","components/StudyNotes.js","routes/Modes.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Notes","NoteRegex","RegExp","FlatToSharp","Modes","Ionian","split","Dorian","Phrygian","Lydian","Mixoludian","Aeolian","Locrian","BadNoteError","Error","BadNoteRangeError","noteValue","note","indexOf","Note","noteMatch","exec","this","octave","Number","noteNumber","Math","floor","synth","Tone","toDestination","SynthContext","React","createContext","useSynth","useContext","notes","setNotes","ref","playNote","duration","delay","time","triggerAttackRelease","schedule","current","playNotes","forEach","i","PianoKey","onPlay","classNames","cx","match","isBlackKey","playing","keyProps","onMouseDown","onMouseOver","e","buttons","role","className","Piano","startNote","endNote","from","to","valueOf","push","map","toString","notesBetween","StudyNotes","children","ModesRoute","useState","mode","setMode","setOctave","modeNotes","prevNoteNumber","addOctaves","onChange","target","value","Object","keys","modeName","onClick","shuffle","first","last","tabs","title","pathname","Header","location","useLocation","tab","App","Provider","exact","path","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5105d9fa.chunk.js","sourcesContent":["/*\r\n * Octave | MIDI Note Numbers\r\n * -------+------------------------------------------------\r\n *        |   C  C#   D  D#   E   F  F#   G  G#   A  A#   B\r\n * -------+------------------------------------------------\r\n * -1     |   0   1   2   3   4   5   6   7   8   9  10  11\r\n *  0     |  12  13  14  15  16  17  18  19  20  21  22  23\r\n *  1     |  24  25  26  27  28  29  30  31  32  33  34  35\r\n *  2     |  36  37  38  39  40  41  42  43  44  45  46  47\r\n *  3     |  48  49  50  51  52  53  54  55  56  57  58  59\r\n *  4     |  60  61  62  63  64  65  66  67  68  69  70  71\r\n *  5     |  72  73  74  75  76  77  78  79  80  81  82  83\r\n *  6     |  84  85  86  87  88  89  90  91  92  93  94  95\r\n *  7     |  96  97  98  99 100 101 102 103 104 105 106 107\r\n *  8     | 108 109 110 111 112 113 114 115 116 117 118 119\r\n *  9     | 120 121 122 123 124 125 126 127\r\n * \r\n *  from http://www.music.mcgill.ca/~ich/classes/mumt306/StandardMIDIfileformat.html\r\n */\r\n\r\nexport const Notes = [\r\n    'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'\r\n];\r\n\r\nexport const NoteRegex = new RegExp(/^([A-G][b#]?)(-?\\d+)$/);\r\n\r\nexport const FlatToSharp = {\r\n    'Db': 'C#',\r\n    'Eb': 'D#',\r\n    'Gb': 'F#',\r\n    'Ab': 'G#',\r\n    'Bb': 'A#'\r\n};\r\n\r\nexport const Modes = {\r\n    Ionian:     'CDEFGABC'.split(''),\r\n    Dorian:     'DEFGABCD'.split(''),\r\n    Phrygian:   'EFGABCDE'.split(''),\r\n    Lydian:     'FGABCDEF'.split(''),\r\n    Mixoludian: 'GABCDEFG'.split(''),\r\n    Aeolian:    'ABCDEFGA'.split(''),\r\n    Locrian:    'BCDEFGAB'.split('')\r\n};\r\n\r\nexport class BadNoteError extends Error {}\r\nexport class BadNoteRangeError extends Error {}\r\n","import { Notes, FlatToSharp, NoteRegex, BadNoteError, BadNoteRangeError } from '../constants';\r\n\r\n/**\r\n * Get the numeric value of a single note like 'A' or 'Cb' for sorting\r\n * @param {string} note \r\n * @returns {number} noteNumber\r\n */\r\nconst noteValue = note => Notes.indexOf(FlatToSharp[note] || note); \r\n\r\n/**\r\n * Note class for sorting, comparison etc.\r\n */\r\nexport class Note {\r\n    constructor(note) {\r\n        if (typeof note === 'string') {\r\n            const noteMatch = NoteRegex.exec(note);\r\n            if (!noteMatch) {\r\n                throw new BadNoteError(`\"${note}\" was not in a valid format`);\r\n            }\r\n            this.note = noteMatch[1];\r\n            if (noteValue(this.note) === -1) {\r\n                throw new BadNoteError(`\"${this.note}\" is not a valid note`)\r\n            }\r\n            this.octave = Number(noteMatch[2]);\r\n        }\r\n        if (typeof note === 'number') {\r\n            const noteNumber = note % 12;\r\n            this.note = Notes[noteNumber];\r\n            this.octave = Math.floor(note / 12) - 1;\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        return `${this.note}${this.octave}`;\r\n    }\r\n\r\n    valueOf() {\r\n        const noteNumber = noteValue(this.note);\r\n        const octaveNumber = this.octave + 1;\r\n        return (octaveNumber * 12) + noteNumber;\r\n    }\r\n}\r\n\r\n/**\r\n * Given two notes with octaves, return an array of all of the notes between them, inclusively\r\n * @param {string} from \r\n * @param {string} to \r\n * @returns {array}\r\n */\r\nexport const notesBetween = (from, to) => {\r\n    const startNote = new Note(from);\r\n    const endNote = new Note(to);\r\n    if (startNote > endNote) {\r\n        throw new BadNoteRangeError('Start note must be lower than end note');\r\n    }\r\n    const notes = [ startNote ];\r\n    for (let i=startNote.valueOf() + 1; i<endNote.valueOf(); i++) {\r\n        notes.push(new Note(i));\r\n    }\r\n    notes.push(endNote);\r\n    return notes.map(note => note.toString());\r\n}\r\n\r\n/**\r\n * Given a collection of sorted notes without octaves, add the given octave\r\n * @param {array} notes \r\n * @param {number} startOctave \r\n * @returns {array}\r\n */\r\nexport const addOctaves = (notes, startOctave=4) => {\r\n    let octave = Number(startOctave);\r\n    let prevNoteNumber = null;\r\n    return notes.map((note, i) => {\r\n        const noteNumber = noteValue(note);\r\n        if (prevNoteNumber !== null && noteNumber < prevNoteNumber) octave += 1;\r\n        prevNoteNumber = noteNumber;\r\n        return `${note}${octave}`;\r\n    });\r\n};\r\n","import React, { useContext } from 'react';\r\nimport * as Tone from \"tone\";\r\n\r\n// https://react.christmas/2020/15\r\n// https://www.guitarland.com/MusicTheoryWithToneJS/PlayMajorScale.html\r\n// https://www.devbridge.com/articles/tonejs-coding-music-production-guide/\r\n\r\nconst synth = new Tone.PolySynth().toDestination();\r\nconst SynthContext = React.createContext({});\r\n\r\nconst useSynth = () => {\r\n  const { notes, setNotes, ref } = useContext(SynthContext);\r\n\r\n  function playNote(note, duration=0.25, delay=0) {\r\n    const time = Tone.now() + delay;\r\n    synth.triggerAttackRelease(note, duration, time);\r\n    Tone.Draw.schedule(function(){\r\n      setNotes({ ...ref.current, [note]: true });\r\n    }, time);\r\n    Tone.Draw.schedule(function(){\r\n      setNotes({ ...ref.current, [note]: false });\r\n    }, time + duration);\r\n  }\r\n  \r\n  function playNotes(notes, delay=0.35) {\r\n    notes.forEach((note,i) => {\r\n      playNote(note, 0.25, i * delay);\r\n    })\r\n  }\r\n\r\n  return { playNote, playNotes, notes };\r\n};\r\n\r\n\r\n\r\nexport {\r\n  useSynth,\r\n  SynthContext\r\n};\r\n","import cx from 'classnames';\r\nimport { isBlackKey } from '../utils/piano';\r\nimport { useSynth } from '../utils/synth';\r\n\r\nconst PianoKey = ({ note, onPlay }) => {\r\n    const { notes } = useSynth(); \r\n    const classNames = cx('pianoKey', isBlackKey(note) ? 'blackKey' : 'whiteKey', { playing: notes[note] } );\r\n    const keyProps = {};\r\n    if (onPlay) {\r\n        keyProps.onMouseDown = onPlay;\r\n        keyProps.onMouseOver = e => e.buttons === 1 && onPlay();\r\n    }\r\n    return (<div role=\"link\" className={classNames} {...keyProps}>\r\n        {note}\r\n    </div>);\r\n};\r\n\r\nexport default PianoKey;","export const isBlackKey = note => {\r\n    return note.match(/^[A-G][b#]/);\r\n};","import { notesBetween } from '../utils/notes';\r\nimport PianoKey from './PianoKey';\r\nimport { useSynth } from '../utils/synth';\r\nimport './Piano.scss';\r\n\r\nconst Piano = ({\r\n    startNote= 'C4',\r\n    endNote='C5'\r\n}) => {\r\n    const { playNote } = useSynth();\r\n    const notes = notesBetween(startNote, endNote);\r\n    return (<div className=\"piano\">\r\n        {notes.map(note => <PianoKey note={note} key={note} onPlay={() => playNote(note)}/>)}\r\n    </div>);\r\n};\r\n\r\nexport default Piano;","import React from 'react';\r\nimport ReactMarkdown from 'react-markdown'\r\nimport './StudyNotes.scss';\r\n\r\nconst StudyNotes = ({ children }) => {\r\n  return (<div className=\"study-notes\">\r\n    <h2 className=\"subtitle\">Study Notes</h2>\r\n    <ReactMarkdown>{children}</ReactMarkdown>\r\n  </div>);\r\n};\r\n\r\nexport default StudyNotes;","import { useState } from 'react';\r\nimport { Modes } from '../constants';\r\nimport Piano from '../components/Piano';\r\nimport StudyNotes from '../components/StudyNotes';\r\nimport { addOctaves } from '../utils/notes';\r\nimport { useSynth } from '../utils/synth';\r\nimport { first, last, shuffle } from 'lodash';\r\n\r\n\r\nconst ModesRoute = () => {\r\n  const { playNotes } = useSynth(); \r\n  const [mode, setMode] = useState('Ionian');\r\n  const [octave, setOctave] = useState(4);\r\n  const modeNotes = addOctaves(Modes[mode], octave);\r\n\r\n  const handleSequence = () => {\r\n    playNotes(modeNotes);\r\n  }\r\n\r\n  const handleRandom = () => {\r\n    playNotes(shuffle([ ...modeNotes, ...modeNotes ]));\r\n  }\r\n\r\n  return (<div>\r\n    <div className=\"box controls\">\r\n      <div>\r\n        <label className=\"label\">Mode</label>\r\n        <div className=\"select\">\r\n          <select onChange={(e) => setMode(e.target.value)} value={mode}>\r\n            {Object.keys(Modes).map(modeName => (\r\n              <option value={modeName} key={modeName}>{modeName}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <label className=\"label\">Octave</label>\r\n        <div className=\"select\">\r\n          <select onChange={(e) => setOctave(e.target.value)} value={octave}>\r\n            {[ 0, 1, 2, 3, 4, 6, 7, 8 ].map(octave => (\r\n              <option value={octave} key={octave}>{octave}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <button className=\"button is-primary\" onClick={handleSequence}>Play In Sequence</button>\r\n      <button className=\"button is-primary\" onClick={handleRandom}>Play Random</button>\r\n    </div>\r\n    <Piano startNote={first(modeNotes)} endNote={last(modeNotes)} />\r\n    <StudyNotes>{`\r\n- Modes are diatonic scales, meaning they are made of fives tones and two semitones.\r\n- **I** **D**on't **P**unch **L**ike **M**uhammed **A**li\r\n- Assignment was to listen to the various modes and get used to their sounds and qualities.\r\n  `}</StudyNotes>\r\n  </div>);\r\n\r\n};\r\n\r\n\r\nexport default ModesRoute;","import React from 'react';\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport cx from 'classnames';\r\nimport './Header.scss';\r\n\r\nconst tabs = [\r\n  { title: 'Home', pathname: '/' },\r\n  { title: 'Modes', pathname: '/modes' }\r\n];\r\n\r\nconst Header = () => {\r\n  const location = useLocation();\r\n  return (\r\n  <div className=\"header\">\r\n    <h1 className=\"title\">Music Theory Class Experiments</h1>\r\n    <div className=\"tabs\">\r\n      <ul>\r\n        {tabs.map((tab,i) => (<li key={i} className={cx({ 'is-active': tab.pathname === location.pathname })}>\r\n          <Link to={tab.pathname}>{tab.title}</Link>\r\n        </li>))}\r\n      </ul>\r\n    </div>\r\n  </div>);\r\n};\r\n\r\nexport default Header;","import React from 'react';\nimport useState from 'react-usestateref'\nimport ModesRoute from './routes/Modes';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Header from './components/Header';\nimport { SynthContext } from './utils/synth';\nimport './App.scss';\n\nfunction App() {\n  const [ notes, setNotes, ref ] = useState({});\n  return (\n    <SynthContext.Provider value={{ notes, setNotes, ref }}>\n      <div className=\"App\">\n        <Router>\n          <Header />\n          <Switch>\n            <Route exact path=\"/\">\n              <p>Hello, doing some stuff to follow along with <a href=\"https://www.coursera.org/learn/edinburgh-music-theory\">Fundamentals of Music Theory</a>.</p>\n              <p>-Pawel</p>\n            </Route>\n            <Route path=\"/modes\">\n              <ModesRoute />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    </SynthContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}